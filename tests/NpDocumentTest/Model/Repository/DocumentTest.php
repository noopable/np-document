<?php

namespace NpDocumentTest\Repository;

use NpDocument\Model\Document\DocumentClass\Document as EntityPrototype;
use NpDocument\Model\DocumentLink as LinkPrototype;
use NpDocument\Model\Repository\Document;
use NpDocument\Model\Repository\DocumentLink as LinkRepository;
use NpDocument\Model\Repository\Section as SectionRepository;
use NpDocument\Model\Section\SectionClass\Section as SectionPrototype;
use NpDocument\Model\Section\SectionPluginManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-27 at 21:07:26.
 */
class DocumentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Document
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     'NpDocument\Model\Repository\Document' => array(
        'parameters' => array(
            'name' => 'document',
            'entityPrototype' => 'NpDocument\Model\Document\DocumentClass\Document',
            'tableGateway' => 'DocumentTable',
        ),
        'injections' => array(
            'setSectionRepository' => array(
                array('NpDocument\Model\Repository\Section'),
            ),
            'setDocumentLinkRepository' => array(
                array('NpDocument\Model\Repository\DocumentLink'),
            ),
        ),
    ),
     *
     *
     */
    protected function setUp()
    {
        //SectionRepositoryが必須かどうかはテストによる
        $proto = new EntityPrototype;
        $table = $this->getMock('Zend\Db\TableGateway\TableGatewayInterface');
        $this->object = new Document('document', $proto, $table);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpDocument\Model\Repository\Document::setDomainId
     * @todo   Implement testSetDomainId().
     */
    public function testSetDomainId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDomainId
     * @todo   Implement testGetDomainId().
     */
    public function testGetDomainId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getGlobalDocumentId
     * @todo   Implement testGetGlobalDocumentId().
     */
    public function testGetGlobalDocumentId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::initialize
     * @todo   Implement testInitialize().
     */
    public function testInitialize()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::setSectionRepository
     * @todo   Implement testSetSectionRepository().
     */
    public function testSetSectionRepository()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getSectionRepository
     * @todo   Implement testGetSectionRepository().
     */
    public function testGetSectionRepository()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::setDocumentLinkRepository
     * @todo   Implement testSetDocumentLinkRepository().
     */
    public function testSetDocumentLinkRepository()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentLinkRepository
     * @todo   Implement testGetDocumentLinkRepository().
     */
    public function testGetDocumentLinkRepository()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::createDocument
     */
    public function testCreateDocument()
    {
        $document = $this->object->createDocument();
        $this->assertInstanceOf('NpDocument\\Model\\Document\\DocumentInterface', $document);
    }

    /**
     * @covers NpDocument\Model\Repository\Document::createDocument
     */
    public function testCreateDocumentWithParams()
    {
        $params = [
            'document_title' => 'foo_bar',
        ];
        $document = $this->object->createDocument($params);
        $this->assertInstanceOf('NpDocument\\Model\\Document\\DocumentInterface', $document);
        $this->assertEquals('foo_bar', $document->document_title);
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentCollection
     * @todo   Implement testGetDocumentCollection().
     */
    public function testGetDocumentCollection()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentWithStrategy
     * @todo   Implement testGetDocumentWithStrategy().
     */
    public function testGetDocumentWithStrategy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDigestCollection
     * @todo   Implement testGetDigestCollection().
     */
    public function testGetDigestCollection()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentByName
     * @todo   Implement testGetDocumentByName().
     */
    public function testGetDocumentByName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocument
     * @todo   Implement testGetDocument().
     */
    public function testGetDocument()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getCollectionFromResultSet
     * @todo   Implement testGetCollectionFromResultSet().
     */
    public function testGetCollectionFromResultSet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::retrieveRelations
     * @todo   Implement testRetrieveRelations().
     */
    public function testRetrieveRelations()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentBranch
     * @todo   Implement testGetDocumentBranch().
     */
    public function testGetDocumentBranch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDocumentOwnedCurrentUser
     * @todo   Implement testGetDocumentOwnedCurrentUser().
     */
    public function testGetDocumentOwnedCurrentUser()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getHoleDocument
     * @todo   Implement testGetHoleDocument().
     */
    public function testGetWholeDocument()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::findDocument
     * @todo   Implement testFindDocument().
     */
    public function testFindDocument()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * AbstractDbtableRepository::beginTransactionが、いろいろと最高すぎるので生テストにする。
     *
     *
     * @covers NpDocument\Model\Repository\Document::saveDocument
     */
    public function testSaveDocumentEtc()
    {
        $proto = new EntityPrototype;
        $sectionProto = new SectionPrototype;

        $dbConnection = array(
            'driver'         => 'Pdo',
            'pdodriver'      => 'mysql',
            'username' => 'admin',
            'password' => 'admin',
            'characterset' => 'UTF8',
            'dbname' => 'sandbox',
            'driver_options' => array(
                //PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''
            ),
            'host' => 'localhost',
        );
        $adapter = new \Zend\Db\Adapter\Adapter($dbConnection);
        $table = new \Zend\Db\TableGateway\TableGateway('document', $adapter);
        $sectionTable = new \Zend\Db\TableGateway\TableGateway('section', $adapter);

        $repository = new Document('document', $proto, $table);
        $sectionRepository = new SectionRepository('section', $sectionProto, $sectionTable);
        $pluginManager = new SectionPluginManager;
        $pluginManager->setInvokableClass('generic', 'NpDocument\\Model\\Section\\SectionClass\\Section');
        $sectionRepository->setSectionPluginManager($pluginManager);

        $repository->setSectionRepository($sectionRepository);
        $repository->initialize();


        $document = $repository->createDocument();
        $document->domain_id = 0;
        //document_idを0にすると、自動的にdocument_idの更新がかかる。
        //global_document_idについても、指定がなければ自動的に更新される。
        $document->document_id = 1;
        $document->document_title = 'np-document test update:' . \Flower\TimeUtils::mysqlFormatDatetime(time());
        /**
         * 一旦、document_idが確定しないと、
         * saveSectionsでこける。
         * sectionの保存にglobal_document_idが必要だからだ。
         *
         */
        $res = $repository->saveDocument($document);
        $this->assertTrue($res);
    }

    /**
     * @covers NpDocument\Model\Repository\Document::setDomain
     * @todo   Implement testSetDomain().
     */
    public function testSetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Document::getDomain
     * @todo   Implement testGetDomain().
     */
    public function testGetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\DocumentLink::retrieveDocumentLinks
     */
    public function testRetrieveDocumentLinksEtc()
    {
        $proto = new EntityPrototype;
        $linkProto = new LinkPrototype;
        $sectionProto = new SectionPrototype;

        $dbConnection = array(
            'driver'         => 'Pdo',
            'pdodriver'      => 'mysql',
            'username' => 'admin',
            'password' => 'admin',
            'characterset' => 'UTF8',
            'dbname' => 'sandbox',
            'driver_options' => array(
                //PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''
            ),
            'host' => 'localhost',
        );
        $adapter = new \Zend\Db\Adapter\Adapter($dbConnection);
        $table = new \Zend\Db\TableGateway\TableGateway('document', $adapter);
        $linkTable = new \Zend\Db\TableGateway\TableGateway('document_link', $adapter);
        $sectionTable = new \Zend\Db\TableGateway\TableGateway('section', $adapter);

        $repository = new Document('document', $proto, $table);
        $linkRepository = new LinkRepository('document_link', $linkProto, $linkTable);
        $sectionRepository = new SectionRepository('section', $sectionProto, $sectionTable);
        $pluginManager = new SectionPluginManager;
        $pluginManager->setInvokableClass('generic', 'NpDocument\\Model\\Section\\SectionClass\\Section');
        $sectionRepository->setSectionPluginManager($pluginManager);

        $repository->setDocumentLinkRepository($linkRepository);
        $repository->setSectionRepository($sectionRepository);
        $repository->initialize();


        $document = $repository->createDocument();
        $document->domain_id = 0;
        //document_idを0にすると、自動的にdocument_idの更新がかかる。
        //global_document_idについても、指定がなければ自動的に更新される。
        $document->document_id = 1;
        $document->document_title = 'np-document test update:' . \Flower\TimeUtils::mysqlFormatDatetime(time());

        $link = $linkRepository->create();

        $link->route = 'foo';
        $link->host = 'example.com';
        $link->setRouteParams([
            'group' => 'default',
            'id' => '?document_name?',
            'test' => 1,
        ]);
        $link->link_label = \Flower\TimeUtils::mysqlFormatDatetime();
        $link->protocol = 'https';
        $link->status = 'draft';
        $link->target = '_blank';


        $document->addLink($link);

        /**
         * 一旦、document_idが確定しないと、
         * saveSectionsでこける。
         * sectionの保存にglobal_document_idが必要だからだ。
         *
         */
        $res = $repository->saveDocument($document);
        $this->assertTrue($res);
    }
}
