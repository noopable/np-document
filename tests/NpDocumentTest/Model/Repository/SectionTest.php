<?php
namespace NpDocumentTest\Model\Repository;

use NpDocument\Model\Repository\Section;
use NpDocument\Model\Section\DataContainer;
use NpDocument\Model\Section\SectionClass\Section as EntityPrototype;
use NpDocument\Model\Section\SectionPluginManager;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-08 at 22:11:28.
 */
class SectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Section
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $proto = new EntityPrototype;
        $table = $this->getMock('Zend\Db\TableGateway\TableGatewayInterface');
        $this->object = new Section('section', $proto, $table);

        $pluginManager = new SectionPluginManager;
        $pluginManager->setInvokableClass('generic', 'NpDocument\\Model\\Section\\SectionClass\\Section');
        $this->object->setSectionPluginManager($pluginManager);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpDocument\Model\Repository\Section::setSectionPluginManager
     */
    public function testSetSectionPluginManager()
    {
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('sectionPluginManager');
        $prop->setAccessible(true);
        $pluginManager = new SectionPluginManager;
        $this->object->setSectionPluginManager($pluginManager);
        $this->assertSame($pluginManager, $prop->getValue($this->object));
    }

    /**
     * @covers NpDocument\Model\Repository\Section::getSectionPluginManager
     */
    public function testGetSectionPluginManagerWithDi()
    {
        $config = array(
            'instance' => array(
                'NpDocument\Model\Repository\Section' => array(
                   'parameters' => array(
                       'name' => 'section',
                       'entityPrototype' => 'NpDocument\Model\Section\DataContainer',
                       'tableGateway' => $this->getMock('Zend\Db\TableGateway\TableGatewayInterface'),
                   ),
                   'injections' => array(
                       'setSectionPluginManager' => array(
                           array('NpDocument\Model\Section\SectionPluginManager'),
                       ),
                   ),
               ),
               'NpDocument\Model\Section\SectionPluginManager' => array(
                   'injections' => array(
                       'setInvokableClass' => array(
                           array('name' => 'generic', 'invokableClass' => 'NpDocument\Model\Section\SectionClass\Section'),
                       ),
                   ),
               ),
            ),
        );

        $oConfig = new \Zend\Di\Config($config);
        $di = new \Zend\Di\Di;
        $oConfig->configure($di);

        $object = $di->get('NpDocument\Model\Repository\Section');
        $this->assertInstanceOf('NpDocument\Model\Repository\Section', $object);

        $plugin = $object->getSectionPluginManager();

        $this->assertInstanceOf('NpDocument\Model\Section\SectionPluginManager', $plugin);
    }

    /**
     * @covers NpDocument\Model\Repository\Section::createSection
     */
    public function testCreateSection()
    {
        $section = $this->object->createSection();
        $this->assertInstanceOf('NpDocument\Model\Section\SectionClass\Section', $section);
    }

    public function testCreateSectionWithParams()
    {
        /**
         * createSectionでのデータ投入は実装されていない。
         * createの仕事ではない。
         */
        $type = 'generic';
        $params = [
            'section_name' => 'generic',
        ];
        $section = $this->object->createSection($type, $params);
        $this->assertInstanceOf('NpDocument\Model\Section\SectionClass\Section', $section);
    }

    /**
     * @covers NpDocument\Model\Repository\Section::saveSections
     * @todo   Implement testSaveSections().
     */
    public function testSaveSections()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Section::saveSection
     */
    public function testSaveSection()
    {
        $section = $this->object->createSection();
        $section->section_class = "generic";
        //table mock がコールされる
        $this->object->saveSection($section);
    }

    /**
     * @covers NpDocument\Model\Repository\Section::saveSection
     */
    public function testSaveSectionToSandboxDb()
    {
        /*
        $this->markTestIncomplete(
          '開発環境でのみ使用する。とりあえずで許して',
        );
         *
         */
        $dbConnection = array(
            'driver'         => 'Pdo',
            'pdodriver'      => 'mysql',
            'username' => 'admin',
            'password' => 'admin',
            'characterset' => 'UTF8',
            'dbname' => 'sandbox',
            'driver_options' => array(
                //PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''
            ),
            'host' => 'localhost',
        );
        $proto = new EntityPrototype;
        $adapter = new \Zend\Db\Adapter\Adapter($dbConnection);
        $table = new \Zend\Db\TableGateway\TableGateway('section', $adapter);

        $repository = new Section('section', $proto, $table);

        $pluginManager = new SectionPluginManager;
        $repository->setSectionPluginManager($pluginManager);
        $section = $repository->createSection();

        /**
         * $domainId
         * $documentId
         * $sectionName
         * $revision
         *
         * $section->domain_id = 0;
         * $section->document_id = 0;
         * $section->section_name = 'digest';
         *
         * 先行して、domain_id = 0 document_id = 0のドキュメントがdocumentテーブルに必要。
         * データベース側の制約。
         * モックの場合は意識しなくても良い。
         *
         * ちなみに、tearDownでレコードを消しておかないと、自動的にupdateが選択されるので、動作の検証としては不十分
         * データベースモックは用意したほうがいいと思う。
         *
         * DuplicateEntryだと！
         */

        /**
         * documentの仕様で、document_idの最小値は1
         * section_revisionの最低値はトリガーの関係で１になる。
         */
        $section->getDataContainer()->originate(0, 1, 'digest', 1);
        $this->assertEquals(0, $section->domain_id);
        $this->assertEquals(1, $section->document_id);

        //editor_idはemailテーブルのprimary_person_idか。
        $section->editor_id = 0;

        $section->section_class = "generic";
        //table mock がコールされる
        $repository->saveSection($section);
    }

    /**
     * @covers NpDocument\Model\Repository\Section::findSection
     * @todo   Implement testFindSection().
     */
    public function testFindSection()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Section::retrieveSectionFromDataContainer
     */
    public function testRetrieveSectionFromDataContainer()
    {
        $dataContainer = new DataContainer;
        $dataContainer->section_class = 'section';
        $section = $this->object->retrieveSectionFromDataContainer($dataContainer);
        $this->assertInstanceOf('NpDocument\Model\Section\SectionClass\Section', $section);
    }

    /**
     * @expectedException NpDocument\Exception\DomainException
     */
    public function testRetrieveSectionFromBareboneDataContainer()
    {
        $dataContainer = new DataContainer;
        $section = $this->object->retrieveSectionFromDataContainer($dataContainer);
        $this->assertInstanceOf('NpDocument\Model\Section\SectionClass\Section', $section);
    }

    /**
     * @covers NpDocument\Model\Repository\Section::retrieveSections
     * @todo   Implement testRetrieveSections().
     */
    public function testRetrieveSections()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Section::retrieveBranchSections
     * @todo   Implement testRetrieveBranchSections().
     */
    public function testRetrieveBranchSections()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Section::setDomain
     * @todo   Implement testSetDomain().
     */
    public function testSetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpDocument\Model\Repository\Section::getDomain
     * @todo   Implement testGetDomain().
     */
    public function testGetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
