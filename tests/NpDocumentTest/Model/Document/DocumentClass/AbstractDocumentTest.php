<?php
namespace NpDocumentTest\Model\Document\DocumentClass;

use NpDocument\Model\Document\DocumentInterface;
use NpDocument\Model\Document\DocumentClass\AbstractDocument;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-17 at 09:34:12.
 */
class AbstractDocumentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractDocument
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('NpDocument\Model\Document\DocumentClass\AbstractDocument');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpDocument\Model\Document\DocumentClass\AbstractDocument::getIdentifier
     */
    public function testGetIdentifier()
    {
        $this->assertEquals(array('domain_id', 'document_id'), $this->object->getIdentifier());
    }

    /**
     * @covers NpDocument\Model\Document\DocumentClass\AbstractDocument::generateGlobalDocumentId
     */
    public function testGenerateGlobalDocumentId()
    {
        $delimiter = DocumentInterface::GLOBAL_DOCUMENT_DELIMITER;
        $expected = 'FFFFFF';
        $this->assertEquals('00FFFF' . $delimiter . '000400', AbstractDocument::generateGlobalDocumentId(65535, 1024));
        $this->assertEquals($expected . $delimiter . '000800', AbstractDocument::generateGlobalDocumentId(hexdec($expected), 2048));
    }
    
    /**
     * @expectedException NpDocument\Exception\DomainException
     */
    public function testGenerateGlobalDocumentIdWithSignedInt()
    {
        AbstractDocument::generateGlobalDocumentId(-65535, 1024);
    }
    
    /**
     * 
     * @expectedException NpDocument\Exception\DomainException
     */
    public function testGenerateGlobalDocumentIdWithOverflowAgainstSortByString()
    {
        $documentId0x = '1000000';
        $domainId0x = 'FFFFFF';
        AbstractDocument::generateGlobalDocumentId(hexdec($domainId0x), hexdec($documentId0x));
    }
}
