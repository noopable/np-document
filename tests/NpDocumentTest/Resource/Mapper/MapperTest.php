<?php
namespace NpDocument\Resource\Mapper;


use NpDocument\Resource\Mapper\Mapper as ResourceMapper;
use NpDocument\Resource\ResourceClass\Resource;
use NpDocument\Resource\ResourceClass\PhpArray;
use NpDocument\Resource\ResourceClass\ResourceInterface;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-03 at 13:28:25.
 */
class MapperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Mapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ResourceMapper;
        $this->ref = new \ReflectionObject($this->object);
        $this->queueRef = $this->ref->getProperty('strategies');
        $this->queueRef->setAccessible(true);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testSetUp()
    {
        $strategies = $this->queueRef->getValue($this->object);
        $this->assertInstanceOf('Zend\Stdlib\PriorityQueue', $strategies);
    }
    /**
     * @covers NpDocument\Resource\Mapper\Mapper::addStrategy
     */
    public function testAddStrategy()
    {
        $callback = function ($entity) { return new Resource;};
        $datum = array(
            'callback' => $callback,
            'entity' => 'stdClass',
        );
        $this->object->addStrategy($callback, 'stdClass');
        $strategies = $this->queueRef->getValue($this->object);
        $this->assertTrue($strategies->contains($datum));
    }

    /**
     * @covers NpDocument\Resource\Mapper\Mapper::setStrategies
     */
    public function testSetStrategies()
    {
        $callback1 = function ($entity) { return new Resource;};
        $callback2 = function ($entity) { return new Resource;};
        $strategies = array(
            array(
                0 => $callback1,
                1 => 'stdClass',
                2 => 10,
            ),
            array(
                0 => $callback2,
                1 => 'ArrayObject',
                2 => 1,
            ),
        );
        $this->object->setStrategies($strategies);
        $datum1 = array(
            'callback' => $callback1,
            'entity' => 'stdClass',
        );
        $datum2 = array(
            'callback' => $callback2,
            'entity' => 'ArrayObject',
        );
        $strategies = $this->queueRef->getValue($this->object);
        $this->assertTrue($strategies->contains($datum1), 1);
        $this->assertTrue($strategies->contains($datum2), 2);
    }

    /**
     * @covers NpDocument\Resource\Mapper\Mapper::entityToResource
     */
    public function testEntityToResource()
    {
        $callback1 = function ($entity) { return new Resource(array('data' => $entity));};
        $callback2 = function ($entity) { return new PhpArray(array('data' => $entity));};
        $strategies = array(
            array(
                0 => $callback1,
                1 => 'stdClass',
                2 => 10,
            ),
            array(
                0 => $callback2,
                1 => 'ArrayObject',
                2 => 1,
            ),
        );
        $this->object->setStrategies($strategies);
        
        //not object returns null
        $res = $this->object->entityToResource('entity');
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\Resource', $res);
        
        //not object returns null
        $res = $this->object->entityToResource(array('entity'));
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\PhpArray', $res);
        
        //not object returns null
        $res = $this->object->entityToResource(123);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\Scalar', $res);
        
        $entity = new \stdClass;
        $entity->data = 'data';
        $res = $this->object->entityToResource($entity);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\Resource', $res);
        
        $entity = new \ArrayObject(array('foo' => 'bar'));
        $res = $this->object->entityToResource($entity);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\PhpArray', $res);
    }

    /**
     * @covers NpDocument\Resource\Mapper\Mapper::objectToResourceWithStrategy
     */
    public function testObjectToResourceWithStrategy()
    {
        $callback1 = function ($entity) { return new Resource(array('data' => $entity));};
        $callback2 = function ($entity) { return new PhpArray(array('data' => $entity));};
        $strategies = array(
            array(
                0 => $callback1,
                1 => 'stdClass',
                2 => 10,
            ),
            array(
                0 => $callback2,
                1 => 'ArrayObject',
                2 => 1,
            ),
        );
        $this->object->setStrategies($strategies);
        
        //not object returns null
        $res = $this->object->objectToResourceWithStrategy('entity');
        $this->assertNull($res);
        
        //not object returns null
        $res = $this->object->objectToResourceWithStrategy(array('entity'));
        $this->assertNull($res);
        
        //not object returns null
        $res = $this->object->objectToResourceWithStrategy(123);
        $this->assertNull($res);
        
        $entity = new \stdClass;
        $entity->data = 'data';
        $res = $this->object->objectToResourceWithStrategy($entity);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\Resource', $res);
        
        $entity = new \ArrayObject(array('foo' => 'bar'));
        $res = $this->object->objectToResourceWithStrategy($entity);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\PhpArray', $res);
    }
}
