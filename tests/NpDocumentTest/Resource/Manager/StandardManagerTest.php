<?php
namespace NpDocumentTest\Resource\Manager;

use NpDocumentTest\Bootstrap;
use NpDocument\Resource\Manager\StandardManager;
use NpDocument\Resource\Converter\DefaultConverter;
use NpDocument\Resource\ResourceClass\Resource;
use NpDocument\Resource\ResourceClass\PhpArray;
use NpDocument\Resource\ResourcePluginManager;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-04 at 15:07:30.
 */
class StandardManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StandardManager
     */
    protected $object;
    
    /**
     *
     * @var \ReflectionObject
     */
    protected $ref;

    /**
     *
     * @var \ReflectionProperty[]
     */
    protected $props;
    
    protected $storageOptions;
    
    protected $resourceDelimiter;
    
    protected $mapStrategies;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StandardManager;
        $this->ref = new \ReflectionObject($this->object);
        $props = $this->ref->getProperties();
        foreach ($props as $prop) {
            $prop->setAccessible(true);
            $this->props[$prop->getName()] = $prop;
        }
        $this->storageOptions =  array(          
            'adapter' => array(
                'name'    => 'filesystem',
                'options' => array(
                    'namespace' => 'resource_standard_manager',
                    'cache_dir' => realpath(Bootstrap::getTestRootDir() . '/tmp/resource'),
                    'dir_level' => 2,
                ),
            ),
            'plugins' => array(
                'exception_handler' => array('throw_exceptions' => true),
            )
        ) ;
        $this->resourceDelimiter = Resource::getDelimiter();
        
        $callback1 = function ($entity) { 
            $resource = new Resource(array('data' => $entity));
            $resource->setInnerId(1000);
            $resource->setType('standard');
            return $resource;
        };
        $callback2 = function ($entity) { return new PhpArray(array('data' => $entity));};
        $this->mapStrategies = array(
            array(
                0 => $callback1,
                1 => 'stdClass',
                2 => 10,
            ),
            array(
                0 => $callback2,
                1 => 'ArrayObject',
                2 => 1,
            ),
        );
        
        $converter = new DefaultConverter;
        $pluginManager = new ResourcePluginManager;
        $pluginManager->setInvokableClass('array', 'NpDocument\Resource\ResourceClass\PhpArray');
        $converter->setResourcePluginManager($pluginManager);
        $this->object->setConverter($converter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $storage = \Zend\Cache\StorageFactory::factory($this->storageOptions);
        $storage->clearByNamespace('resource_standard_manager');
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setConverter
     */
    public function testSetConverter()
    {
        $converter = new DefaultConverter;
        $this->object->setConverter($converter);
        $this->assertEquals($this->props['converter']->getValue($this->object), $converter);
        return $this->object;
    }

    /**
     * @depends testSetConverter
     * @covers NpDocument\Resource\Manager\StandardManager::getConverter
     */
    public function testGetConverter($previous)
    {
        $this->assertInstanceOf('NpDocument\Resource\Manager\StandardManager', $previous);
        $this->assertInstanceOf('NpDocument\Resource\Converter\DefaultConverter', $previous->getConverter());
        
        $this->assertNotEquals($previous, $this->object);
        //get by fallback setting
        $this->assertInstanceOf('NpDocument\Resource\Converter\DefaultConverter', $this->object->getConverter());
        
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setMapper
     */
    public function testSetMapper()
    {
        $mapper = new \NpDocument\Resource\Mapper\Mapper;
        $this->object->setMapper($mapper);
        $this->assertEquals($this->props['mapper']->getValue($this->object), $mapper);
        return $this->object;
    }

    /**
     * @depends testSetMapper
     * @covers NpDocument\Resource\Manager\StandardManager::getMapper
     */
    public function testGetMapper($previous)
    {
        $this->assertInstanceOf('NpDocument\Resource\Manager\StandardManager', $previous);
        $this->assertInstanceOf('NpDocument\Resource\Mapper\Mapper', $previous->getMapper());
        
        $this->assertNotEquals($previous, $this->object);
        //get by fallback setting
        $this->assertInstanceOf('NpDocument\Resource\Mapper\Mapper', $this->object->getMapper());
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setEntity
     */
    public function testSetEntity()
    {
        $entity = new \stdClass;
        $this->object->setEntity($entity);
        $this->assertEquals($this->props['entity']->getValue($this->object), $entity);
        return $this->object;
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::save
     */
    public function testSave()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->setStrategies($this->mapStrategies);
        $entity = new \ArrayObject(array('foo' => 'bar'));
        $savedId = $this->object->save($entity);
        $this->assertInternalType('string', $savedId);
        $this->assertEquals('array_2074547940', $savedId);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::saveResource
     */
    public function testSaveResource()
    {
        $resource = new Resource;
        $resource->setData('foo');
        $resource->setType('standard');
        $resource->setInnerId(123);
        $resource->setProperties(array('bar' => 'baz'));
        //$resource->setResourceId('standard' . $this->resourceDelimiter . '1');
        
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->saveResource($resource);
    }

    /**
     * @depends testSaveResource
     * @covers NpDocument\Resource\Manager\StandardManager::get
     */
    public function testGet($resourceId)
    {
        $resource = new Resource;
        $resource->setData('foo');
        $resource->setType('standard');
        $resource->setInnerId(123);
        $resource->setProperties(array('bar' => 'baz'));
        //$resource->setResourceId('standard' . $this->resourceDelimiter . '1');
        
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->saveResource($resource);
        
        $resourceId = $resource->getResourceId();
        
        $this->object->setStorageOptions($this->storageOptions);
        $gotResource = $this->object->get($resourceId);
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\Resource', $gotResource);
        $this->assertEquals($resourceId, $gotResource->getResourceId());
        $this->assertEquals('foo', $gotResource->getData());
        $this->assertEquals(array('bar' => 'baz'), $gotResource->getProperties());
    }
    
    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setBulkIds
     * @covers NpDocument\Resource\Manager\BulkManagerInterface::setBulkIds
     */
    public function testSetBulkIds()
    {
        $ids = array(
            'standard' . $this->resourceDelimiter . '123', 
            'standard' . $this->resourceDelimiter . '234',
        );
        $this->object->setBulkIds($ids);
        $this->assertEquals($ids, $this->props['bulkIds']->getValue($this->object));
        return array('object' => $this->object, 'ids' => $ids);
    }
    
    /**
     * @depends testSetBulkIds
     * @covers NpDocument\Resource\Manager\StandardManager::addBulkIds
     */
    public function testAddBulkIds($set)
    {
        $object = $set['object'];
        $previousIds = $set['ids'];
        
        $addIds = array(
            'standard' . $this->resourceDelimiter . '345', 
            'standard' . $this->resourceDelimiter . '456',
        );
        $object->addBulkIds($addIds);
        $ids = array_merge($previousIds, $addIds);
        $this->assertEquals($ids, $this->props['bulkIds']->getValue($object));
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::bulkGet
     */
    public function testBulkGet()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->setStrategies($this->mapStrategies);
        
        $entity1 = new \ArrayObject(array('foo' => 'bar'));
        $entity2 = new \stdClass;
        $entity2->color = 'black';
        $entities = array($entity1, $entity2);
        $savedIds = $this->object->saveMulti($entities);
        $this->assertContains('array_2074547940', $savedIds);
        $this->assertContains('standard_1000', $savedIds);
        
        $this->object->setBulkIds($savedIds);
        $resources = $this->object->bulkGet();
        $this->assertCount(2, $resources);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::getResources
     */
    public function testGetResources()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->setStrategies($this->mapStrategies);
        
        $entity1 = new \ArrayObject(array('foo' => 'bar'));
        $entity2 = new \stdClass;
        $entity2->color = 'black';
        $entities = array($entity1, $entity2);
        $savedIds = $this->object->saveMulti($entities);
        $this->assertContains('array_2074547940', $savedIds);
        $this->assertContains('standard_1000', $savedIds);
        
        $resources = $this->object->getResources($savedIds);
        $this->assertCount(2, $resources);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::saveMulti
     */
    public function testSaveMulti()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->setStrategies($this->mapStrategies);
        
        $entity1 = new \ArrayObject(array('foo' => 'bar'));
        $entity2 = new \stdClass;
        $entity2->color = 'black';
        $entities = array($entity1, $entity2);
        $savedIds = $this->object->saveMulti($entities);
        $this->assertContains('array_2074547940', $savedIds);
        $this->assertContains('standard_1000', $savedIds);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::addStrategy
     * @todo   Implement testAddStrategy().
     */
    public function testAddStrategy()
    {
        $param1 = function() {return true;};
        $param2 = 'stdClass';
        $param3 = 100;
        $mapperMock = $this->getMock('NpDocument\Resource\Mapper\Mapper');
        $mapperMock->expects($this->once())
                ->method('addStrategy')
                ->with($param1, $param2);
        $this->object->setMapper($mapperMock);
        $this->object->addStrategy($param1, $param2);
        
        $mapperMock2 = $this->getMock('NpDocument\Resource\Mapper\Mapper');
        $mapperMock2->expects($this->once())
                ->method('addStrategy')
                ->with($param1, $param2, $param3);
        
        $this->object->setMapper($mapperMock2);
        $this->object->addStrategy($param1, $param2, $param3);
    }

    /**
     * proxy to Mapper
     * @covers NpDocument\Resource\Manager\StandardManager::entityToResource
     */
    public function testEntityToResource()
    {
        $param1 = new \stdClass;
        $mapperMock = $this->getMock('NpDocument\Resource\Mapper\Mapper');
        $mapperMock->expects($this->once())
                ->method('entityToResource')
                ->with($param1);
        $this->object->setMapper($mapperMock);
        $this->object->entityToResource($param1);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setStrategies
     */
    public function testSetStrategies()
    {
        $param1 = array();
        $param2 = true;
        $mapperMock = $this->getMock('NpDocument\Resource\Mapper\Mapper');
        $mapperMock->expects($this->once())
                ->method('setStrategies')
                ->with($param1);
        $this->object->setMapper($mapperMock);
        $this->object->setStrategies($param1);
        
        $mapperMock2 = $this->getMock('NpDocument\Resource\Mapper\Mapper');
        $mapperMock2->expects($this->once())
                ->method('setStrategies')
                ->with($param1, $param2);
        
        $this->object->setMapper($mapperMock2);
        $this->object->setStrategies($param1, $param2);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setStorageOptions
     */
    public function testSetStorageOptions()
    {
        $storageOptions = array('adapter' => 'filesystem');
        $this->object->setStorageOptions($storageOptions);
        $this->assertEquals($this->props['storageOptions']->getValue($this->object), $storageOptions);
    }

    /**
     * @covers NpDocument\Resource\Manager\StandardManager::setStorage
     * @covers NpDocument\Resource\Manager\CacheStorageTrait::setStorage
     */
    public function testSetStorage()
    {
        $storageMock = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $this->object->setStorage($storageMock);
        $this->assertEquals($this->props['storage']->getValue($this->object), $storageMock);
        return $this->object;
    }
    
    /**
     * @expectedException NpDocument\Exception\RuntimeException
     */
    public function testSetStorageByNullTrigger()
    {
        $this->object->setStorage();
    }
    
    /**
     * @expectedExceptionMessage try to make a cache storage, but invalid options
     * @expectedException NpDocument\Exception\RuntimeException
     */
    public function testSetStorageByInvalidStorageOptions()
    {
        $this->object->setStorageOptions(array('foo' => 'bar'));
        $this->object->setStorage();
    }
    
    public function testSetStorageByValidStorageOptions()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->object->setStorage();
        $storage = $this->object->getStorage();
        $this->assertInstanceOf('Zend\Cache\Storage\StorageInterface', $storage);
        $this->assertEquals($this->storageOptions['adapter']['options']['cache_dir'], $storage->getOptions()->toArray()['cache_dir']);
    }
}
