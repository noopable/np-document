<?php
namespace NpDocumentTest\Resource\Converter;

use NpDocument\Resource\Converter\DefaultConverter;
use NpDocument\Resource\ResourceClass\Resource;
use NpDocument\Resource\ResourceConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-31 at 23:41:20.
 */
class DefaultConverterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DefaultConverter
     */
    protected $object;

    protected $resourceIdDelimiter;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DefaultConverter;
        $this->resourceIdDelimiter = Resource::getDelimiter();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::resourceIdToKvKeys
     */
    public function testResourceIdToKvKeys()
    {
        $propDelimiter = $this->object->getPropDelimiter();
        $resourceId = 'foo' . $this->resourceIdDelimiter . '123';
        $expected = Array (
            'serialized' => $resourceId,
            'string' => $resourceId . $propDelimiter . 'str',
            'properties' => $resourceId . $propDelimiter . 'props',
            'lastUpdated' => $resourceId . $propDelimiter . 'time',
        );
        $result = $this->object->resourceIdToKvKeys($resourceId);
        $this->assertEquals($expected, $result);
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::AssocToResource
     */
    public function testAssocToResource()
    {
        $assoc = array (
            'type' => 'standard',
            'inner_id' => '322',
            'data' => __METHOD__,
            'properties' => array('sample array serialized1'),
        );
        
        $resource = $this->object->AssocToResource($assoc);
        
        $this->assertInstanceOf('NpDocument\Resource\ResourceClass\ResourceInterface', $resource);
        
        //test the maked resource received assoc options
        $ref = new \ReflectionObject($resource);
        $prop = $ref->getProperty('options');
        $prop->setAccessible(true);
        $options = $prop->getValue($resource);
        $this->assertEquals(array(), $options);
        
    }

    /**
     * 
     * @expectedException NpDocument\Exception\RuntimeException
     */
    public function testCustomKvPairsToResourceWithoutConfiguration()
    {
        $propDelimiter = $this->object->getPropDelimiter();
        $resourceId1 = 'generic' . $this->resourceIdDelimiter . '324';
        $resourceId2 = 'generic' . $this->resourceIdDelimiter . '325';
        $kvPairs = array(
           $resourceId1 => 'data1',
           $resourceId1 . $propDelimiter . 'props' => array('sample array serialized1'),
           $resourceId2 => 'data2',
           $resourceId2 . $propDelimiter . 'props' => array('sample array serialized2'),
        );
        
        $resources = $this->object->kvPairsToResources($kvPairs);
        $this->assertInternalType('array', $resources);
        $this->assertContainsOnlyInstancesOf('NpDocument\Resource\ResourceClass\ResourceInterface', $resources);
        $this->assertTrue(array_keys($resources));
    }
    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::kvPairsToResources
     */
    public function testKvPairsToResources()
    {
        $propDelimiter = $this->object->getPropDelimiter();
        $resourceId1 = 'standard' . $this->resourceIdDelimiter . '324';
        $resourceId2 = 'standard' . $this->resourceIdDelimiter . '325';
        $kvPairs = array(
           $resourceId1 => 'data1',
           $resourceId1 . $propDelimiter . 'props' => array('dummy' => 'sample array serialized1'),
           $resourceId2 => 'data2',
           $resourceId2 . $propDelimiter . 'props' => array('dummy' => 'sample array serialized2'),
        );
        
        //kvPairs check
        //リソース２つ分として解釈可能なkvPairかどうかを確認。
        $assocs = $this->object->kvPairsToAssocs($kvPairs);
        //standard type only
        $this->assertCount(1, $assocs);
        $this->assertArrayHasKey('standard', $assocs);
        $this->assertCount(2, $assocs['standard']);

        $resources = $this->object->kvPairsToResources($kvPairs);
        $this->assertInternalType('array', $resources);
        $this->assertCount(2, $resources);
        $this->assertContainsOnlyInstancesOf('NpDocument\Resource\ResourceClass\ResourceInterface', $resources);
        $this->assertEquals(array($resourceId1, $resourceId2), array_keys($resources));
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::getKeyPattern
     */
    public function testGetKeyPattern()
    {
        $this->assertEquals(
                '/([a-zA-Z0-9-]+)[' . $this->resourceIdDelimiter . 
                ']([a-zA-Z0-9-]+)(?:[' . $this->object->getPropDelimiter() . 
                ']([a-zA-Z]+))*/', 
                $this->object->getKeyPattern());
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::setKeyPattern
     */
    public function testSetKeyPattern()
    {
        $expected = '/(foo)/i';
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('keyPattern');
        $prop->setAccessible(true);
        $this->object->setKeyPattern($expected);
        $this->assertEquals($expected, $prop->getValue($this->object));
    }
    
    public function testSetGetKeyPattern()
    {
        $expected = '/(bar)/i';
        $this->object->setKeyPattern($expected);
        $this->assertEquals($expected, $this->object->getKeyPattern());
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::setResourcePluginManager
     */
    public function testSetResourcePluginManager()
    {
        $this->assertInstanceOf('NpDocument\Resource\Converter\PersistenceConverterInterface', 
                $this->object->setResourcePluginManager(new \NpDocument\Resource\ResourcePluginManager));
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::getResourcePluginManager
     */
    public function testGetResourcePluginManager()
    {
        $resourcePluginManager = $this->object->getResourcePluginManager();
        $this->assertInstanceOf('NpDocument\Resource\ResourcePluginManager', $resourcePluginManager);
        return $resourcePluginManager;
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::resourceToKvPair
     */
    public function testResourceToKvPair()
    {
        $propDelimiter = $this->object->getPropDelimiter();
        $resource = new Resource;
        $config = array(
            'type' => 'standard',
            'data' => 'foo',
            'inner_id' => 356,
        );
        $resourceConfig = new ResourceConfig($config);
        $resourceConfig->configure($resource);
        $resourceId = $resource->getType() . $this->resourceIdDelimiter . $resource->getInnerId();
        //first, check resource
        $this->assertEquals('standard', $resource->getType());
        $this->assertEquals('356', $resource->getInnerId());
        $this->assertEquals($resourceId, $resource->getResourceId());
        $kvPair = $this->object->resourceToKvPair($resource);
        
        $resourceId = $resource->getResourceId();
        
        $this->assertEquals(serialize('foo'), $kvPair[$resourceId]);
        $this->assertEquals('"foo"', $kvPair[$resourceId . $propDelimiter . 'str']);
        $this->assertEquals(serialize(array()), $kvPair[$resourceId . $propDelimiter . 'props']);
        $this->assertInternalType('int', $kvPair[$resourceId . $propDelimiter . 'time']);
        
    }

    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::kvPairsToAssocs
     */
    public function testKvPairsToAssocs()
    {
        $propDelimiter = $this->object->getPropDelimiter();
        $resourceId1 = 'foo' . $this->resourceIdDelimiter . '324';
        $resourceId2 = 'foo' . $this->resourceIdDelimiter . '325';
        $resourceId3 = 'bar' . $this->resourceIdDelimiter . '324';
        $fixture = array(
           $resourceId1=> 'data1',
           $resourceId1 . $propDelimiter  . 'props' => 'sample array serialized1',
           $resourceId2 => 'data2',
           $resourceId2 . $propDelimiter . 'props' => 'sample array serialized2',
           $resourceId3 => 'data3',
           $resourceId3 . $propDelimiter . 'props' => 'sample array serialized3',
        );
        
        $expected = 
array (
  'foo' => 
  array (
    324 => 
    array (
      'type' => 'foo',
      'data' => 'data1',
      'properties' => 'sample array serialized1',
      'inner_id' => '324',
      'resource_id' => $resourceId1,
    ),
    325 => 
    array (
      'type' => 'foo',
      'inner_id' => '325',
      'data' => 'data2',
      'properties' => 'sample array serialized2',
    'resource_id' => $resourceId2,
    ),
  ),
  'bar' => 
  array (
    324 => 
    array (
      'type' => 'bar',
      'inner_id' => '324',
      'data' => 'data3',
      'properties' => 'sample array serialized3',
        'resource_id' => $resourceId3,
    ),
  ),
);

        $result = $this->object->kvPairsToAssocs($fixture);
        $this->assertEquals($expected, $result);
    }
    
    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::getPropDelimiter
     */
    public function testGetPropDelimiter()
    {
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('propDelimiter');
        $prop->setAccessible(true);
        $this->assertEquals($prop->getValue($this->object), $this->object->getPropDelimiter());
    }
    
    /**
     * @covers NpDocument\Resource\Converter\DefaultConverter::getSerializer
     */
    public function testGetSerializer()
    {
        $this->assertInstanceOf('Zend\Serializer\Adapter\PhpSerialize', $this->object->getSerializer());
    }
}
