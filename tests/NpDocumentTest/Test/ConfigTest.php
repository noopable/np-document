<?php
namespace NpDocumentTest\Test;

/**
 * テストが適切に書かれているかテスト
 */
use NpDocumentTest\Bootstrap;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-03 at 10:44:22.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Config
     */
    protected $object;

    /**
     *
     * @var Zend\ServiceManager\ServiceManager
     */
    protected $serviceManager;
    
    
    /**
     * configuration in config/autoload/*.conf.php
     * @var array
     */
    protected $config;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->serviceManager = Bootstrap::getServiceManager();
        $this->config = $this->serviceManager->get('Config');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testResourceCacheConfIsValid()
    {
        $this->assertArrayHasKey('test_np_document_resource_manager', $this->config);
        $this->assertArrayHasKey('cache_storage', $this->config['np_document_resource_manager']);
        //test cache_strotage option is valid
        $cacheConfig = $this->config['test_np_document_resource_manager']['cache_storage'];
        $cacheStorage = \Zend\Cache\StorageFactory::factory($cacheConfig);
        $this->assertInstanceOf('Zend\Cache\Storage\StorageInterface', $cacheStorage);
        $injectedOptions = $cacheStorage->getOptions();
        $targetDir = realpath(dirname(dirname(__DIR__)) . '/tmp/resource'); 
        $this->assertEquals($targetDir, realpath($injectedOptions->cache_dir));
        return $cacheStorage;
    }
    
    /**
     * 
     * @depends testResourceCacheConfIsValid
     */
    public function testResourceCacheDirCanReadWrite($cacheStorage)
    {
        $cacheStorage->setItem('foo', 'bar');
        $this->assertTrue($cacheStorage->hasItem('foo'));
        $this->assertEquals('bar', $cacheStorage->getItem('foo'));
        $this->assertTrue($cacheStorage->removeItem('foo'));
        $this->assertFalse($cacheStorage->hasItem('foo'));
    }
}
